classdef CanvasText
    %CANVASNODETEXT Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        request
        model
    end
    
    methods
        function obj = CanvasText(model)
            obj.model = model;
        end
        %% Build Text
        function [ns_text,tab_text] = build_ns_text(obj,fileType)
            codestring = ['A':'Z' '0':'9';];
            id_char_length = 7;
            ns_name = codestring(randperm(length(codestring),id_char_length));
            nm_name = [ns_name,'-module'];
            
            neural_module_text = obj.build_neural_modules(nm_name,fileType);
            
            switch fileType
                case 'project'
                    node_preamble = obj.build_node_preamble(ns_name);

                    node_text = {};
                    if (obj.model.num_neurons) == 0
                        node_preamble{end+1,1} = '<Nodes/>';
                    else
                        node_preamble{end+1,1} = '<Nodes>';
                        for i = 1:obj.model.num_neurons
                            node_holder = obj.build_node(obj.model.neuron_objects(i),'project');
                            node_text = [node_text;node_holder];
                        end
                        for i = 1:obj.model.num_muscles
                            muscle_holder = obj.build_muscle(obj.model.muscle_objects(i));
                            node_text = [node_text;muscle_holder];
                        end
                        for i = 1:obj.model.num_adapters
                            adapter_holder = obj.build_adapter(obj.model.adapter_objects(i),'project');
                            node_text = [node_text;adapter_holder];
                        end
                        node_text{end+1,1} = '</Nodes>';
                    end

                    link_text = {};
                    if obj.model.num_links == 0
                        link_text = {'<Links/>'};
                    else
                        link_text = {'<Links>'};
                        for i = 1:obj.model.num_links
                            synapse_ind = strcmp({obj.model.synapse_types.name},obj.model.link_objects(i).synaptictype);
                            link_holder = obj.build_link(obj.model.link_objects(i),obj.model.synapse_types(synapse_ind));
                            link_text = [link_text;link_holder];
                        end
                        link_text{end+1,1} = '</Links>';
                    end

                    cdata_text = obj.build_cdata(ns_name);

                    ns_text = [neural_module_text;node_preamble;node_text;link_text;cdata_text;'</Node>'];
                    tab_text = obj.build_tab_text(ns_name);
                case 'simulation'
                    ns_text = neural_module_text;
                    tab_text = -1;
            end
            
        end
        %% Build Neural Modules
        function out_text = build_neural_modules(obj,name,fileType)
            dt = obj.model.proj_params.physicstimestep;
            switch fileType
                case 'project'
                    preamble = {'<NeuralModules>';...
                                    '<Node>';...
                                        ['<ID>',name,'</ID>'];...
                                        '<AssemblyFile>IntegrateFireGUI.dll</AssemblyFile>';...
                                        '<ClassName>IntegrateFireGUI.DataObjects.Behavior.NeuralModule</ClassName>';...
                                        ['<TimeStep Value="',num2str(dt),'" Scale="milli" Actual="',num2str(dt/1000),'"/>'];...
                                        ['<ID>',name,'</ID>'];...
                                        '<AHPEquilibriumPotential Value="-70" Scale="milli" Actual="-0.07"/>';...
                                        '<SpikePeak Value="0" Scale="milli" Actual="0"/>';...
                                        '<SpikeStrength>1</SpikeStrength>';...
                                        '<CaEquilibriumPotential Value="200" Scale="milli" Actual="0.2"/>';...
                                        '<RefractoryPeriod Value="2" Scale="milli" Actual="0.002"/>';...
                                        '<UseCriticalPeriod>False</UseCriticalPeriod>';...
                                        '<StartCriticalPeriod Value="0" Scale="None" Actual="0"/>';...
                                        '<EndCriticalPeriod Value="5" Scale="None" Actual="5"/>';...
                                        '<TTX>False</TTX>';...
                                        '<Cd>False</Cd>';...
                                        '<HH>False</HH>';...
                                        '<FreezeHebb>False</FreezeHebb>';...
                                        '<RetainHebbMemory>False</RetainHebbMemory>'};
                    synapse_text = {};
                    synNum = length(obj.model.synapse_types);
                    if synNum == 0
                        synapse_text = {'<SynapseTypes/>'};
                    else
                        synapse_text = {'<SynapseTypes>'};
                        for i = 1:synNum
                            synapse = obj.model.synapse_types(i);
                            synapse_holder = obj.build_synapse_type(synapse,'project');
                            synapse_text = [synapse_text;synapse_holder];
                        end
                        synapse_text{end+1,1} = '</SynapseTypes>';
                    end

                    physics_postscript = {'<Node>';...
                                            '<ID>1496cbb3-2e9f-4bbd-9ec0-503de005e1e8</ID>';...
                                            '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                                            '<ClassName>AnimatGUI.DataObjects.Behavior.PhysicsModule</ClassName>';...
                                            '<TimeStep Value="2.5" Scale="milli" Actual="0.0025"/>';...
                                            '</Node>'};

                   out_text = [preamble;synapse_text;'</Node>';physics_postscript;'</NeuralModules>'];
               case 'simulation'
                   preamble = {'<NeuralModules>';...
                                    '<NeuralModule>';...
                                        ['<ID>',name,'</ID>'];...
                                        '<ModuleName>IntegrateFireSim</ModuleName>';...
                                        '<ModuleFileName>IntegrateFireSim_VC10.dll</ModuleFileName>';...
                                        '<Type>IntegrateFireSimModule</Type>';...
                                        ['<TimeStep>',num2str(dt/1000),'</TimeStep>'];...
                                        '<SpikePeak>0</SpikePeak>';...
                                        '<SpikeStrength>1</SpikeStrength>';...
                                        '<AHPEquilPot>-70</AHPEquilPot>';...
                                        '<CaEquilPot>200</CaEquilPot>';...
                                        '<AbsoluteRefr>2</AbsoluteRefr>';...
                                        '<UseCriticalPeriod>False</UseCriticalPeriod>';...
                                        '<StartCriticalPeriod>0</StartCriticalPeriod>';...
                                        '<EndCriticalPeriod>5</EndCriticalPeriod>';...
                                        '<TTX>False</TTX>';...
                                        '<Cd>False</Cd>';...
                                        '<HH>False</HH>';...
                                        '<FreezeHebb>False</FreezeHebb>';...
                                        '<RetainHebbMemory>False</RetainHebbMemory>'};
                                   
                    synNum = length(obj.model.synapse_types);
                    if synNum == 0
                        synapse_text = {'<Synapses/>'};
                    else
                        synapse_text = {'<Synapses>';...
                                            '<SpikingSynapses/>';...
                                            '<NonSpikingSynapses>'};
                        for i = 1:synNum
                            synapse = obj.model.synapse_types(i);
                            synapse_holder = obj.build_synapse_type(synapse,'simulation');
                            synapse_text = [synapse_text;synapse_holder];
                        end
                        synapse_text = [synapse_text;{'</NonSpikingSynapses>';'<ElectricalSynapses/>';'</Synapses>'}];
                    end
                    
                    neurNum = length(obj.model.neuron_objects);
                    if neurNum == 0
                        neuron_text = {'<Neurons/>'};
                    else
                        neuron_text = {'<Neurons>'};
                        for i = 1:neurNum
                            neuron = obj.model.neuron_objects(i);
                            neuron_holder = obj.build_node(neuron,'simulation');
                            neuron_text = [neuron_text;neuron_holder];
                        end
                        neuron_text = [neuron_text;{'</Neurons>'}];
                    end
                    
                    physics_module = {'<NeuralModule>';...
                        '<ID>1496cbb3-2e9f-4bbd-9ec0-503de005e1e8</ID>';...
                        '<ModuleName>PhysicsModule</ModuleName>';...
                        '<ModuleFileName>VortexAnimatSim_VC10.dll</ModuleFileName>';...
                        '<Type>PhysicsNeuralModule</Type>';...
                        ['<TimeStep>',num2str(dt/1000),'</TimeStep>']};

                    adNum = length(obj.model.adapter_objects);
                    if adNum == 0
                        adapter_text = {'<Adapters/>'};
                    else
                        adapter_text = {'<Adapters>'};
                        for i = 1:adNum
                            adapter = obj.model.adapter_objects(i);
                            adapter_holder = obj.build_adapter(adapter,'simulation');
                            adapter_text = [adapter_text;adapter_holder];
                        end
                        adapter_text = [adapter_text;{'</Adapters>'}];
                    end
                    
                    physics_module = [physics_module;adapter_text;{'</NeuralModule>'}];
                    
                    out_text = [preamble;...
                                synapse_text;...
                                neuron_text;...
                                {'<Connexions/>';'<ExternalSynapses/>';'</NeuralModule>'};...
                                physics_module;...
                                {'</NeuralModules>'}];
            end
        end
        %% Build Node Preamble
        function out_text = build_node_preamble(~,name)
            out_text = {'<Node>';...
                            '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                            '<ClassName>AnimatGUI.DataObjects.Behavior.Nodes.Subsystem</ClassName>';...
                            ['<ID>',name,'-ID','</ID>'];...
                            '<Alignment>CenterMiddle</Alignment>';...
                            '<AutoSize>None</AutoSize>';...
                            '<BackMode>Transparent</BackMode>';...
                            '<DashStyle>Solid</DashStyle>';...
                            '<DrawColor>-16777216</DrawColor>';...
                            '<DrawWidth>1</DrawWidth>';...
                            '<FillColor>-8586240</FillColor>';...
                            '<Font Family="Arial" Size="12" Bold="True" Underline="False" Strikeout="False" Italic="False"/>';...
                            '<Gradient>False</Gradient>';...
                            '<GradientColor>0</GradientColor>';...
                            '<GradientMode>BackwardDiagonal</GradientMode>';...
                            '<DiagramImageName/>';...
                            '<ImageName/>';...
                            '<ImageLocation x="0" y="0"/>';...
                            '<ImagePosition>RelativeToText</ImagePosition>';...
                            '<InLinkable>True</InLinkable>';...
                            '<LabelEdit>True</LabelEdit>';...
                            '<Location x="0" y="0"/>';...
                            '<OutLinkable>True</OutLinkable>';...
                            '<ShadowStyle>None</ShadowStyle>';...
                            '<ShadowColor>-16777216</ShadowColor>';...
                            '<ShadowSize Width="0" Height="0"/>';...
                            '<Shape>Rectangle</Shape>';...
                            '<ShapeOrientation>Angle0</ShapeOrientation>';...
                            '<Size Width="40" Height="40"/>';...
                            ['<Text>',name,'</Text>'];...
                            '<TextColor>-16777216</TextColor>';...
                            '<TextMargin Width="0" Height="0"/>';...
                            '<ToolTip/>';...
                            '<Transparent>False</Transparent>';...
                            '<Url/>';...
                            '<XMoveable>True</XMoveable>';...
                            '<XSizeable>True</XSizeable>';...
                            '<YMoveable>True</YMoveable>';...
                            '<YSizeable>True</YSizeable>';...
                            '<ZOrder>0</ZOrder>';...
                            '<ZOrder>0</ZOrder>';...
                            '<TemplateNode>False</TemplateNode>';...
                            '<TemplateNodeCount>1</TemplateNodeCount>';...
                            '<TemplateChangeScript/>';...
                            '<InLinks/>';...
                            '<OutLinks/>'};
        end
        %% Build Link
        function out_text = build_link(~,link,synapse)
            tlink = link;
            tsyn = synapse;
            if strcmp(tlink.synaptictype,'adapter')
                out_text = 	[{'<Link>';...
                    '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                    '<ClassName>AnimatGUI.DataObjects.Behavior.Links.Adapter</ClassName>';...
                    ['<ID>',tlink.ID,'</ID>'];...
                    '<AdjustDst>False</AdjustDst>';...
                    '<AdjustOrg>False</AdjustOrg>';...
                    '<ArrowDestination>';...
                        '<Style>Arrow</Style>';...
                        '<Size>Small</Size>';...
                        '<Angle>deg15</Angle>';...
                        '<Filled>False</Filled>';...
                    '</ArrowDestination>';...
                    '<ArrowMiddle>';...
                        '<Style>None</Style>';...
                        '<Size>Small</Size>';...
                        '<Angle>deg30</Angle>';...
                        '<Filled>False</Filled>';...
                    '</ArrowMiddle>';...
                    '<ArrowOrigin>';...
                        '<Style>None</Style>';...
                        '<Size>Small</Size>';...
                        '<Angle>deg30</Angle>';...
                        '<Filled>False</Filled>';...
                    '</ArrowOrigin>';...
                    '<BackMode>Transparent</BackMode>';...
                    '<DashStyle>Solid</DashStyle>';...
                    '<DrawColor>-16777216</DrawColor>';...
                    '<DrawWidth>1</DrawWidth>';...
                    ['<DestinationID>',tlink.destination_ID,'</DestinationID>'];...
                    '<Font Family="Arial" Size="12" Bold="False" Underline="False" Strikeout="False" Italic="False"/>';...
                    '<Hidden>False</Hidden>';...
                    '<Jump>Arc</Jump>';...
                    '<LineStyle>Polyline</LineStyle>';...
                    '<OrthogonalDynamic>True</OrthogonalDynamic>';...
                    ['<OriginID>',tlink.origin_ID,'</OriginID>'];...
                    '<OrientedText>True</OrientedText>';...
                    '<Selectable>True</Selectable>';...
                    '<Stretchable>True</Stretchable>';...
                    '<Text/>';...
                    '<ToolTip/>';...
                    '<Url/>';...
                    '<ZOrder>0</ZOrder>';...
                    '</Link>'}];
            else
                out_text = [{'<Link>';...
                    ['<AssemblyFile>',tlink.assemblyfile,'</AssemblyFile>'];...
                    ['<ClassName>',tlink.behavior,'</ClassName>'];...
                    ['<ID>',tlink.ID,'</ID>'];...
                    '<AdjustDst>False</AdjustDst>';...
                    '<AdjustOrg>False</AdjustOrg>';...
                    '<ArrowDestination>';...
                    ['<Style>',tsyn.arrow_dest_style,'</Style>'];...
                    ['<Size>',tsyn.arrow_dest_size,'</Size>'];...
                    ['<Angle>',tsyn.arrow_dest_angle,'</Angle>'];...
                    ['<Filled>',tsyn.arrow_dest_filled,'</Filled>'];...
                    '</ArrowDestination>';...
                    '<ArrowMiddle>';...
                    ['<Style>',tsyn.arrow_mid_style,'</Style>'];...
                    ['<Size>',tsyn.arrow_mid_size,'</Size>'];...
                    ['<Angle>',tsyn.arrow_mid_angle,'</Angle>'];...
                    ['<Filled>',tsyn.arrow_mid_filled,'</Filled>'];...
                    '</ArrowMiddle>';...
                    '<ArrowOrigin>';...
                    ['<Style>',tsyn.arrow_origin_style,'</Style>'];...
                    ['<Size>',tsyn.arrow_origin_size,'</Size>'];...
                    ['<Angle>',tsyn.arrow_origin_angle,'</Angle>'];...
                    ['<Filled>',tsyn.arrow_origin_filled,'</Filled>'];...
                    '</ArrowOrigin>'
                    '<BackMode>Transparent</BackMode>';...
                    '<DashStyle>Solid</DashStyle>';...
                    '<DrawColor>-16777216</DrawColor>';...
                    '<DrawWidth>1</DrawWidth>';...
                    ['<DestinationID>',tlink.destination_ID,'</DestinationID>'];...
                    '<Font Family="Arial" Size="8" Bold="False" Underline="False" Strikeout="False" Italic="False"/>';...
                    '<Hidden>False</Hidden>';...
                    '<Jump>Arc</Jump>';...
                    '<LineStyle>Polyline</LineStyle>';...
                    '<OrthogonalDynamic>True</OrthogonalDynamic>';...
                    ['<OriginID>',tlink.origin_ID,'</OriginID>'];...
                    '<OrientedText>True</OrientedText>';...
                    '<Selectable>True</Selectable>';...
                    '<Stretchable>True</Stretchable>';...
                    '<Text/>';...
                    '<ToolTip/>';...
                    '<Url/>';...
                    '<ZOrder>0</ZOrder>';...
                    ['<SynapticTypeID>',synapse.ID,'</SynapticTypeID>'];...
                     '<UserText/>';...
                     ['<SynapticConductance Value="',num2str(synapse.max_syn_cond),'" Scale="micro" Actual="',num2str(synapse.max_syn_cond/1e6),'"/>'];...
                     '<ConductionDelay Value="0" Scale="milli" Actual="0"/>';...
                    '</Link>'}];
            end
        end
        %% Build Node
        function out_text = build_node(~,node,fileType)
            tnode = node;
            if isempty(tnode.inlinks)
                inlinks_snippet = '<InLinks/>';
            else
                inlinks_inner = {};
                for i = 1:size(tnode.inlinks,1)
                    inlinks_holder = strcat('<ID>',tnode.inlinks(i).ID,'</ID>');
                    inlinks_inner = [inlinks_inner;inlinks_holder];
                end
                inlinks_snippet = ['<InLinks>';...
                    inlinks_inner;...
                    '</InLinks>'];
            end
            if isempty(tnode.outlinks)
                outlinks_snippet = '<OutLinks/>';
            else
                outlinks_inner = {};
                for i = 1:size(tnode.outlinks,1)
                    outlinks_holder = {strcat('<ID>',tnode.outlinks(i).ID,'</ID>')};
                    outlinks_inner = [outlinks_inner;outlinks_holder];
                end
                outlinks_snippet = ['<OutLinks>';...
                    outlinks_inner;...
                    '</OutLinks>'];
            end
            switch fileType
                case 'project'
                out_text = [{'<Node>';...
                    '<AssemblyFile>IntegrateFireGUI.dll</AssemblyFile>';...
                    '<ClassName>IntegrateFireGUI.DataObjects.Behavior.Neurons.NonSpiking</ClassName>';...
                    ['<ID>',tnode.ID,'</ID>'];...
                    '<Alignment>CenterMiddle</Alignment>';...
                    '<AutoSize>None</AutoSize>';...
                    '<BackMode>Transparent</BackMode>';...
                    '<DashStyle>Solid</DashStyle>';...
                    '<DrawColor>-16777216</DrawColor>';...
                    '<DrawWidth>1</DrawWidth>';...
                    ['<FillColor>',num2str(tnode.color),'</FillColor>'];...
                    '<Font Family="Arial" Size="8" Bold="True" Underline="False" Strikeout="False" Italic="False"/>';...
                    '<Gradient>False</Gradient>';...
                    '<GradientColor>0</GradientColor>';...
                    '<GradientMode>BackwardDiagonal</GradientMode>';...
                    '<DiagramImageName/>';...
                    '<ImageName/>';...
                    '<ImageLocation x="0" y="0"/>';...
                    '<ImagePosition>RelativeToText</ImagePosition>';...
                    '<InLinkable>True</InLinkable>';...
                    '<LabelEdit>True</LabelEdit>';...
                    ['<Location x="',num2str(tnode.location(1)),'" y="',num2str(tnode.location(2)),'"/>'];...
                    '<OutLinkable>True</OutLinkable>';...
                    '<ShadowStyle>None</ShadowStyle>';...
                    '<ShadowColor>-16777216</ShadowColor>';...
                    '<ShadowSize Width="0" Height="0"/>';...
                    '<Shape>Termination</Shape>';...
                    '<ShapeOrientation>Angle0</ShapeOrientation>';...
                    ['<Size Width="',num2str(tnode.nsize(1)),'" Height="',num2str(tnode.nsize(1)),'"/>'];...
                    ['<Text>',tnode.name,'</Text>'];...
                    '<TextColor>-16777216</TextColor>';...
                    '<TextMargin Width="0" Height="0"/>';...
                    '<ToolTip/>';...
                    '<Transparent>False</Transparent>';...
                    '<Url/>';...
                    '<XMoveable>True</XMoveable>';...
                    '<XSizeable>True</XSizeable>';...
                    '<YMoveable>True</YMoveable>';...
                    '<YSizeable>True</YSizeable>';...
                    '<ZOrder>0</ZOrder>';...
                    '<ZOrder>0</ZOrder>';...
                    '<TemplateNode>False</TemplateNode>';...
                    '<TemplateNodeCount>1</TemplateNodeCount>';...
                    '<TemplateChangeScript/>'};...
                    inlinks_snippet;...
                    outlinks_snippet;...
                    {['<Enabled>',tnode.enabled,'</Enabled>'];...
                    ['<RestingPotential Value="',num2str(tnode.restingpotential),'" Scale="milli" Actual="',num2str(tnode.restingpotential/1000),'"/>'];...
                    '<RelativeSize Value="1" Scale="None" Actual="1"/>';...
                    ['<TimeConstant Value="',num2str(tnode.timeconstant),'" Scale="milli" Actual="',num2str(tnode.timeconstant/1000),'"/>'];...
                    ['<InitialThreshold Value="',num2str(tnode.initialthreshold),'" Scale="milli" Actual="',num2str(tnode.initialthreshold/1000),'"/>'];...
                    ['<RelativeAccomodation Value="0.3" Scale="None" Actual="',num2str(tnode.relativeaccomodation),'"/>'];...
                    ['<AccomodationTimeConstant Value="',num2str(tnode.accomodationtimeconstant),'" Scale="milli" Actual="',num2str(tnode.accomodationtimeconstant/1000),'"/>'];...
                    ['<AHP_Conductance Value="',num2str(tnode.AHPconductance),'" Scale="micro" Actual="',num2str(tnode.AHPconductance/1000000),'"/>'];...
                    ['<AHP_TimeConstant Value="',num2str(tnode.AHPtimeconstant),'" Scale="milli" Actual="',num2str(tnode.AHPtimeconstant/1000),'"/>'];...
                    '<MaxCaConductance Value="0" Scale="micro" Actual="0"/>';...
                    '<CaActivation>';...
                    ['<ID>',tnode.ca_act_ID,'</ID>'];...
                    ['<MidPoint Value="',num2str(tnode.ca_act_midpoint),'" Scale="milli" Actual="',num2str(tnode.ca_act_midpoint/1000),'"/>'];...
                    ['<Slope Value="',num2str(tnode.ca_act_slope),'" Scale="None" Actual="',num2str(tnode.ca_act_slope),'"/>'];...
                    ['<TimeConstant Value="',num2str(tnode.ca_act_timeconstant),'" Scale="milli" Actual="',num2str(tnode.ca_act_timeconstant/1000),'"/>'];...
                    '<ActivationType>True</ActivationType>';...
                    '</CaActivation>';...
                    '<CaDeactivation>';...
                    ['<ID>',tnode.ca_deact_ID,'</ID>'];...
                    ['<MidPoint Value="',num2str(tnode.ca_deact_midpoint),'" Scale="milli" Actual="',num2str(tnode.ca_deact_midpoint/1000),'"/>'];...
                    ['<Slope Value="',num2str(tnode.ca_deact_slope),'" Scale="None" Actual="',num2str(tnode.ca_deact_slope),'"/>'];...
                    ['<TimeConstant Value="',num2str(tnode.ca_deact_timeconstant),'" Scale="milli" Actual="',num2str(tnode.ca_deact_timeconstant/1000),'"/>'];...
                    '<ActivationType>False</ActivationType>';...
                    '</CaDeactivation>';...
                    '<InitAtBottom>True</InitAtBottom>';...
                    ['<TonicStimulus Value="',num2str(tnode.tonicstimulus*1000000000),'" Scale="nano" Actual="',num2str(tnode.tonicstimulus),'"/>'];...
                    ['<TonicNoise Value="',num2str(tnode.tonicnoise*1000),'" Scale="milli" Actual="',num2str(tnode.tonicnoise),'"/>'];...
                    '</Node>'}];
                case 'simulation'
                    out_text = {'<Neuron>';...
                        ['<ID>',num2str(tnode.ID),'</ID>'];...
                        ['<Name>',num2str(tnode.name),'</Name>'];...
                        ['<Enabled>',tnode.enabled,'</Enabled>'];...
                        ['<TonicStimulus>',num2str(tnode.tonicstimulus),'</TonicStimulus>'];...
                        '<Noise>0</Noise>';...
                        ['<RestingPot>',num2str(tnode.restingpotential),'</RestingPot>'];...
                        '<Size>1</Size>';...
                        ['<TimeConst>',num2str(tnode.timeconstant),'</TimeConst>'];...
                        ['<InitialThresh>',num2str(tnode.initialthreshold),'</InitialThresh>'];...
                        ['<RelativeAccom>',num2str(tnode.relativeaccomodation),'</RelativeAccom>'];...
                        ['<AccomTimeConst>',num2str(tnode.accomodationtimeconstant),'</AccomTimeConst>'];...
                        ['<AHPAmp>',num2str(tnode.AHPconductance),'</AHPAmp>'];...
                        ['<AHPTimeConst>',num2str(tnode.AHPtimeconstant),'</AHPTimeConst>'];...
                        '<GMaxCa>0</GMaxCa>';...
                        '<BurstInitAtBottom>True</BurstInitAtBottom>';...
                        '<CaActivation>';...
                        ['<ID>',tnode.ca_act_ID,'</ID>'];...
                        ['<MidPoint>',num2str(tnode.ca_act_midpoint),'</MidPoint>'];...
                        ['<Slope>',num2str(tnode.ca_act_slope),'</Slope>'];...
                        ['<TimeConstant>',num2str(tnode.ca_act_timeconstant),'</TimeConstant>'];...
                        '<ActivationType>True</ActivationType>';...
                        '</CaActivation>';...
                        '<CaDeactivation>';...
                        ['<ID>',tnode.ca_deact_ID,'</ID>'];...
                        ['<MidPoint>',num2str(tnode.ca_deact_midpoint),'</MidPoint>'];...
                        ['<Slope>',num2str(tnode.ca_deact_slope),'</Slope>'];...
                        ['<TimeConstant>',num2str(tnode.ca_deact_timeconstant),'</TimeConstant>'];...
                        '<ActivationType>False</ActivationType>';...
                        '</CaDeactivation>';...
                        '</Neuron>'};
            end
            
        end
        %% Build Muscle
        function out_text = build_muscle(~,muscle)
            if isempty(muscle.inlinks)
                inlinks_snippet = '<InLinks/>';
            else
                inlinks_inner = {};
                for i = 1:size(muscle.inlinks,1)
                    inlinks_holder = strcat('<ID>',muscle.inlinks(i).ID,'</ID>');
                    inlinks_inner = [inlinks_inner;inlinks_holder];
                end
                inlinks_snippet = ['<InLinks>';...
                    inlinks_inner;...
                    '</InLinks>'];
            end
            if isempty(muscle.outlinks)
                outlinks_snippet = '<OutLinks/>';
            else
                outlinks_inner = {};
                for i = 1:size(muscle.outlinks,1)
                    outlinks_holder = {strcat('<ID>',muscle.outlinks(i).ID,'</ID>')};
                    outlinks_inner = [outlinks_inner;outlinks_holder];
                end
                outlinks_snippet = ['<OutLinks>';...
                    outlinks_inner;...
                    '</OutLinks>'];
            end
            out_text = [{'<Node>';...
                '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                '<ClassName>AnimatGUI.DataObjects.Behavior.Nodes.Muscle</ClassName>';...
                ['<ID>',muscle.ID,'</ID>'];...
                '<Alignment>CenterTop</Alignment>';...
                '<AutoSize>ImageToNode</AutoSize>';...
                '<BackMode>Transparent</BackMode>';...
                '<DashStyle>Solid</DashStyle>';...
                '<DrawColor>16777215</DrawColor>';...
                '<DrawWidth>1</DrawWidth>';...
                '<FillColor>-1</FillColor>';...
                '<Font Family="Arial" Size="8" Bold="True" Underline="False" Strikeout="False" Italic="False"/>';...
                '<Gradient>False</Gradient>';...
                '<GradientColor>0</GradientColor>';...
                '<GradientMode>BackwardDiagonal</GradientMode>';...
                '<DiagramImageName>AnimatGUI.Muscle.gif</DiagramImageName>';...
                '<ImageName/>';...
                '<ImageLocation x="0" y="0"/>';...
                '<ImagePosition>RelativeToText</ImagePosition>';...
                '<InLinkable>True</InLinkable>';...
                '<LabelEdit>True</LabelEdit>';...
                ['<Location x="',num2str(muscle.location(1)),'" y="',num2str(muscle.location(2)),'"/>'];...
                '<OutLinkable>True</OutLinkable>';...
                '<ShadowStyle>None</ShadowStyle>';...
                '<ShadowColor>-16777216</ShadowColor>';...
                '<ShadowSize Width="0" Height="0"/>';...
                '<Shape>Rectangle</Shape>';...
                '<ShapeOrientation>Angle0</ShapeOrientation>';...
                ['<Size Width="',num2str(muscle.size(1)),'" Height="',num2str(muscle.size(1)),'"/>'];...
                ['<Text>',muscle.name(4:end-7),'</Text>'];...
                '<TextColor>-16777216</TextColor>';...
                '<TextMargin Width="0" Height="30"/>';...
                '<ToolTip/>';...
                ['<Transparent>',CanvasConstants.MUSCLE_transp,'</Transparent>'];...
                '<Url/>';...
                '<XMoveable>True</XMoveable>';...
                '<XSizeable>True</XSizeable>';...
                '<YMoveable>True</YMoveable>';...
                '<YSizeable>True</YSizeable>';...
                '<ZOrder>0</ZOrder>';...
                '<ZOrder>0</ZOrder>';...
                '<TemplateNode>False</TemplateNode>';...
                '<TemplateNodeCount>1</TemplateNodeCount>';...
                '<TemplateChangeScript/>'};...
                inlinks_snippet;...
                outlinks_snippet;...
                {['<LinkedBodyPartID>',muscle.linkedID,'</LinkedBodyPartID>'];...
                '</Node>'}];
        end
        %% Build Adapter
        function out_text = build_adapter(~,adapter,fileType)
            if isempty(adapter.inlinks)
                inlinks_snippet = '<InLinks/>';
            else
                inlinks_inner = {};
                for i = 1:size(adapter.inlinks,1)
                    inlinks_holder = strcat('<ID>',adapter.inlinks(i).ID,'</ID>');
                    inlinks_inner = [inlinks_inner;inlinks_holder];
                end
                inlinks_snippet = ['<InLinks>';...
                    inlinks_inner;...
                    '</InLinks>'];
            end
            if isempty(adapter.outlinks)
                outlinks_snippet = '<OutLinks/>';
            else
                outlinks_inner = {};
                for i = 1:size(adapter.outlinks,1)
                    outlinks_holder = {strcat('<ID>',adapter.outlinks(i).ID,'</ID>')};
                    outlinks_inner = [outlinks_inner;outlinks_holder];
                end
                outlinks_snippet = ['<OutLinks>';...
                    outlinks_inner;...
                    '</OutLinks>'];
            end
            switch fileType
                case 'project'
                    out_text = [{'<Node>';...
                        '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                        '<ClassName>AnimatGUI.DataObjects.Behavior.Nodes.NodeToPhysicalAdapter</ClassName>';...
                        ['<ID>',adapter.ID,'</ID>'];...
                        '<Alignment>CenterMiddle</Alignment>';...
                        '<AutoSize>None</AutoSize>';...
                        '<BackMode>Transparent</BackMode>';...
                        '<DashStyle>Solid</DashStyle>';...
                        '<DrawColor>-16777216</DrawColor>';...
                        '<DrawWidth>1</DrawWidth>';...
                        '<FillColor>-360334</FillColor>';...
                        '<Font Family="Arial" Size="8" Bold="True" Underline="False" Strikeout="False" Italic="False"/>';...
                        '<Gradient>False</Gradient>';...
                        '<GradientColor>0</GradientColor>';...
                        '<GradientMode>BackwardDiagonal</GradientMode>';...
                        '<DiagramImageName/>';...
                        '<ImageName/>';...
                        '<ImageLocation x="0" y="0"/>';...
                        '<ImagePosition>RelativeToText</ImagePosition>';...
                        '<InLinkable>True</InLinkable>';...
                        '<LabelEdit>True</LabelEdit>';...
                        ['<Location x="',num2str(adapter.location(1)),'" y="',num2str(adapter.location(2)),'"/>'];...
                        '<OutLinkable>True</OutLinkable>';...
                        '<ShadowStyle>None</ShadowStyle>';...
                        '<ShadowColor>-16777216</ShadowColor>';...
                        '<ShadowSize Width="0" Height="0"/>';...
                        '<Shape>Display</Shape>';...
                        '<ShapeOrientation>Angle0</ShapeOrientation>';...
                        ['<Size Width="',num2str(adapter.size(1)),'" Height="',num2str(adapter.size(1)),'"/>'];...
                        '<Text></Text>';...
                        '<TextColor>-16777216</TextColor>';...
                        '<TextMargin Width="0" Height="0"/>';...
                        '<ToolTip/>';...
                        '<Transparent>False</Transparent>';...
                        '<Url/>';...
                        '<XMoveable>True</XMoveable>';...
                        '<XSizeable>True</XSizeable>';...
                        '<YMoveable>True</YMoveable>';...
                        '<YSizeable>True</YSizeable>';...
                        '<ZOrder>0</ZOrder>';...
                        '<ZOrder>0</ZOrder>';...
                        '<TemplateNode>False</TemplateNode>';...
                        '<TemplateNodeCount>1</TemplateNodeCount>';...
                        '<TemplateChangeScript/>'};...
                        inlinks_snippet;...
                        outlinks_snippet;...
                        {['<OriginID>',adapter.origin_node_ID,'</OriginID>'];...
                        ['<DestinationID>',adapter.destination_node_ID,'</DestinationID>'];...
                        '<DataTypeID>MembraneVoltage</DataTypeID>';...
                        '<TargetDataTypeID>MembraneVoltage</TargetDataTypeID>';...
                        '<Gain>';...
                            ['<ID>',adapter.gain_profile_ID,'</ID>'];...
                            '<Type>Polynomial</Type>';...
                            '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                            '<ClassName>AnimatGUI.DataObjects.Gains.Polynomial</ClassName>';...
                            '<UseLimits>False</UseLimits>';...
                            '<LimitsReadOnly>False</LimitsReadOnly>';...
                            '<LimitOutputsReadOnly>False</LimitOutputsReadOnly>';...
                            '<UseParentIncomingDataType>True</UseParentIncomingDataType>';...
                            '<LowerLimitScale Value="-100" Scale="milli" Actual="-0.1"/>';...
                            '<UpperLimitScale Value="100" Scale="milli" Actual="0.1"/>';...
                            '<LowerOutputScale Value="0" Scale="None" Actual="0"/>';...
                            '<UpperOutputScale Value="1" Scale="None" Actual="1"/>';...
                            '<IndependentUnits/>';...
                            '<DependentUnits>Output Variable</DependentUnits>';...
                            '<A Value="0" Scale="None" Actual="0"/>';...
                            '<B Value="0" Scale="None" Actual="0"/>';...
                            '<C Value="1" Scale="None" Actual="1"/>';...
                            '<D Value="0" Scale="None" Actual="0"/>';...
                        '</Gain>';...
                        '<DelayBufferMode>NoDelayBuffer</DelayBufferMode>';...
                        '<DelayBufferInterval Value="100" Scale="milli" Actual="0.1"/>';...
                        '<InitIODisableDuration Value="0" Scale="milli" Actual="0"/>';...
                        '<Enabled>True</Enabled>';...
                        '<RobotIOScale>1</RobotIOScale>';...
                        '<SynchWithRobot>True</SynchWithRobot>';...
                        '<SynchUpdateInterval Value="0" Scale="milli" Actual="0"/>';...
                        '<SynchUpdateStartInterval Value="0" Scale="milli" Actual="0"/>';...
                        '</Node>'}];
                case 'simulation'
                    out_text = {'<Adapter>';...
                        ['<ID>',adapter.ID,'</ID>'];...
                        ['<Name>',adapter.name,'</Name>'];...
                        '<Enabled>True</Enabled>';...
                        '<ModuleName/>';...
                        '<Type>NodeToPhysical</Type>';...
                        '<SourceModule>IntegrateFireSim</SourceModule>';...
                        ['<SourceID>',adapter.origin_node_ID,'</SourceID>'];...
                        '<SourceDataType>MembraneVoltage</SourceDataType>';...
                        '<TargetModule>AnimatLab</TargetModule>';...
                        ['<TargetID>',adapter.destination_linked_ID,'</TargetID>'];...
                        '<TargetDataType>MembraneVoltage</TargetDataType>';...
                        '<DelayBufferMode>0</DelayBufferMode>';...
                        '<DelayBufferInterval>0.1</DelayBufferInterval>';...
                        '<RobotIOScale>1</RobotIOScale>';...
                        '<InitIODisableDuration>0</InitIODisableDuration>';...
                        '<SynchWithRobot>True</SynchWithRobot>';...
                        '<SynchUpdateInterval>0</SynchUpdateInterval>';...
                        '<SynchUpdateStartInterval>0</SynchUpdateStartInterval>';...
                        '<Gain>';...
                        ['<ID>',adapter.gain_profile_ID,'</ID>'];...
                        '<Type>Polynomial</Type>';...
                        '<UseLimits>False</UseLimits>';...
                        '<A>0</A>';...
                        '<B>0</B>';...
                        '<C>1</C>';...
                        '<D>0</D>';...
                        '</Gain>';...
                        '</Adapter>'};
            end
        end
        %% Build Stimulus
        function out_text = build_stimulus(~,stimulus,fileType)
            switch fileType
                case 'project'
                    if strcmp(stimulus.type,'tc')
                        if ~isempty(stimulus.projeq)
                            valType = 'Equation';
                            eq = stimulus.projeq;
                        else
                            valType = 'Constant';
                            eq = num2str(0);
                        end
                        out_text = {'<Stimulus>';...
                            '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                            '<ClassName>AnimatGUI.DataObjects.ExternalStimuli.TonicCurrent</ClassName>';...
                            ['<Name>',stimulus.name,'</Name>'];...
                            ['<ID>',stimulus.ID,'</ID>'];...
                            ['<StartTime Value="',num2str(stimulus.starttime),'" Scale="None" Actual="',num2str(stimulus.starttime),'"/>'];...
                            ['<EndTime Value="',num2str(stimulus.endtime),'" Scale="None" Actual="',num2str(stimulus.endtime),'"/>'];...
                            '<StepInterval Value="0" Scale="milli" Actual="0"/>';...
                            '<AlwaysActive>False</AlwaysActive>';...
                            ['<Enabled>',stimulus.enabled,'</Enabled>'];...
                            ['<ValueType>',valType,'</ValueType>'];...
                            ['<Equation>',eq,'</Equation>'];...
                            '<OrganismID>e40d2c4f-9c31-49f8-8a5c-5688fb768225</OrganismID>';...
                            ['<NodeID>',stimulus.target_ID,'</NodeID>'];...
                            ['<CurrentOn Value="',num2str(stimulus.magnitude),'" Scale="nano" Actual="',num2str(stimulus.magnitude/1e9),'"/>'];...
                            '<CurrentOff Value="0" Scale="nano" Actual="0"/>';...
                            '<CurrentBurstOff Value="0" Scale="nano" Actual="0"/>';...
                            '<CycleOnDuration Value="3" Scale="None" Actual="3"/>';...
                            '<CycleOffDuration Value="0" Scale="None" Actual="0"/>';...
                            '<BurstOnDuration Value="3" Scale="None" Actual="3"/>';...
                            '<BurstOffDuration Value="0" Scale="None" Actual="0"/>';...
                            '</Stimulus>'};
                    elseif strcmp(stimulus.type,'dc')
                        out_text = {'<Stimulus>';...
                            '<AssemblyFile>AnimatGUI.dll</AssemblyFile>';...
                            '<ClassName>AnimatGUI.DataObjects.ExternalStimuli.InverseMuscleCurrent</ClassName>';...
                            ['<Name>',stimulus.name,'</Name>'];...
                            ['<ID>',stimulus.ID,'</ID>'];...
                            ['<StartTime Value="',num2str(stimulus.starttime),'" Scale="None" Actual="',num2str(stimulus.starttime),'"/>'];...
                            ['<EndTime Value="',num2str(stimulus.endtime),'" Scale="None" Actual="',num2str(stimulus.endtime),'"/>'];...
                            '<StepInterval Value="0" Scale="milli" Actual="0"/>';...
                            '<AlwaysActive>False</AlwaysActive>';...
                            ['<Enabled>',stimulus.enabled,'</Enabled>'];...
                            '<ValueType>Constant</ValueType>';...
                            '<Equation>0</Equation>';...
                            '<OrganismID>e40d2c4f-9c31-49f8-8a5c-5688fb768225</OrganismID>';...
                            ['<NodeID>',stimulus.target_ID,'</NodeID>'];...
                            ['<RestPotential Value="',num2str(stimulus.rest_potential),'" Scale="milli" Actual="',num2str(stimulus.rest_potential/1000),'"/>'];...
                            ['<Conductance Value="',num2str(stimulus.conductance),'" Scale="nano" Actual="',num2str(stimulus.conductance*1e-9),'"/>'];...
                            ['<LengthData>',stimulus.current_data_file,'</LengthData>'];...
                            ['<MuscleID>',stimulus.muscle_ID,'</MuscleID>'];...
                            '</Stimulus>'};
                    else
                        disp('Something went wrong with writing stimulus text, stimulus isn''t type ''tc'' or ''dc''')
                        out_text = -1;
                        return
                    end
                case 'simulation'
                    if strcmp(stimulus.type,'tc')
                        if ~isempty(stimulus.simeq)
                            eq = char(stimulus.simeq);
                        else
                            eq = num2str(0);
                        end
                        out_text = {'<Stimulus>';...
                            ['<ID>',stimulus.ID,'</ID>'];...
                            ['<Name>',stimulus.name,'</Name>'];...
                            '<AlwaysActive>False</AlwaysActive>';...
                            ['<Enabled>',stimulus.enabled,'</Enabled>'];...
                            '<Type>Current</Type>';...
                            '<CurrentType>Tonic</CurrentType>';...
                            '<OrganismID>e40d2c4f-9c31-49f8-8a5c-5688fb768225</OrganismID>';...
                            ['<TargetNodeID>',stimulus.target_ID,'</TargetNodeID>'];...
                            ['<StartTime>',num2str(stimulus.starttime),'</StartTime>'];...
                            ['<EndTime>',num2str(stimulus.endtime),'</EndTime>'];...
                            '<CycleOnDuration>3</CycleOnDuration>';...
                            '<CycleOffDuration>0</CycleOffDuration>';...
                            '<BurstOnDuration>3</BurstOnDuration>';...
                            '<BurstOffDuration>0</BurstOffDuration>';...
                            ['<CurrentOn>',num2str(stimulus.magnitude/1e9),'</CurrentOn>'];...
                            '<CurrentOff>0</CurrentOff>';...
                            '<CurrentBurstOff>0</CurrentBurstOff>';...
                            ['<CurrentOnEquation>',eq,'</CurrentOnEquation>'];...
                            '</Stimulus>'};
                    elseif strcmp(stimulus.type,'dc')
                        out_text = {'<Stimulus>';...
                            ['<ID>',stimulus.ID,'</ID>'];...
                            ['<Name>',stimulus.name,'</Name>'];...
                            '<AlwaysActive>False</AlwaysActive>';...
                            ['<Enabled>',stimulus.enabled,'</Enabled>'];...
                            '<ModuleName/>';...
                            '<Type>InverseMuscleCurrent</Type>';...
                            '<OrganismID>e40d2c4f-9c31-49f8-8a5c-5688fb768225</OrganismID>';...
                            ['<TargetNodeID>',stimulus.target_ID,'</TargetNodeID>'];...
                            ['<MuscleID>',stimulus.muscle_ID,'</MuscleID>'];...
                            ['<RestPotential>',num2str(stimulus.rest_potential/1000),'</RestPotential>'];...
                            ['<Conductance>',num2str(stimulus.conductance*1e-9),'</Conductance>'];...
                            ['<LengthData>',stimulus.current_data_file,'</LengthData>'];...
                            '</Stimulus>'};
                    else
                        disp('Something went wrong with writing stimulus text, stimulus isn''t type ''tc'' or ''dc''')
                        out_text = -1;
                        return
                    end
            end
        end
        %% Build Datatool
        function out_text = build_datatool(~,datatool)
            out_text = {'<ToolHolder>';...
                ['<ID>',datatool.ID,'</ID>'];...
                ['<Name>',datatool.name,'</Name>'];...
                '<BaseAssemblyFile>LicensedAnimatGUI.dll</BaseAssemblyFile>';...
                '<BaseClassName>LicensedAnimatGUI.Forms.Charts.LineChart</BaseClassName>';...
                ['<ToolFormID>',datatool.tfID,'</ToolFormID>'];...
                '</ToolHolder>'};
        end
        %% Build CDATA
        function out_text = build_cdata(obj,ns_name)
            numNeurons = obj.model.num_neurons;
            numLinks = obj.model.num_links;
            numAdapters = obj.model.num_adapters;
            numMuscles = obj.model.num_muscles;
            out_text = {};
            link_log = cell(numNeurons+numMuscles,2);
            cdata_ID = [ns_name,'-cdata'];
            
            cdata_preamble = {'<DiagramXml><![CDATA[<Root>';...
                '<Diagram>';...
                ['<ID>',cdata_ID,'</ID>'];...
                '<AssemblyFile>LicensedAnimatGUI.dll</AssemblyFile>';...
                '<ClassName>LicensedAnimatGUI.Forms.Behavior.AddFlowDiagram</ClassName>';...
                ['<PageName>',ns_name,'</PageName>'];...
                '<ZoomX>1</ZoomX>';...
                '<ZoomY>1</ZoomY>';...
                '<BackColor Red="1" Green="1" Blue="1" Alpha="1"/>';...
                '<ShowGrid>True</ShowGrid>';...
                '<GridColor Red="0.427451" Green="0.427451" Blue="0.427451" Alpha="1"/>';...
                '<GridSize Width="16" Height="16"/>';...
                '<GridStyle>DottedLines</GridStyle>';...
                '<JumpSize>Medium</JumpSize>';...
                '<SnapToGrid>False</SnapToGrid>';...
                ['<AddFlow Nodes="',num2str(numNeurons+numAdapters+numMuscles),'" Links="',num2str(numLinks),'">'];...
                '  <Version>1.5.0.1</Version>'};
            
            out_text = [out_text;cdata_preamble];
            CDATA_item_num = 0;
            
            for i = 1:numNeurons
                cdata_holder = obj.build_node_cdata(obj.model.neuron_objects(i) );
                out_text = [out_text;cdata_holder];
                link_log{i,1} = CDATA_item_num;
                link_log{i,2} = obj.model.neuron_objects(i).ID;
                CDATA_item_num = CDATA_item_num + 1;
            end
            
            for i = 1:numMuscles
                cdata_holder = obj.build_node_cdata(obj.model.muscle_objects(i));
                out_text = [out_text;cdata_holder];
                link_log{i+numNeurons,1} = CDATA_item_num;
                link_log{i+numNeurons,2} = obj.model.muscle_objects(i).ID;
                CDATA_item_num = CDATA_item_num + 1;
            end
            
            % Neuron and Muscle Links
            for i = numLinks:-1:1
                tlink = obj.model.link_objects(i);
                if ~any(contains({tlink.origin_ID(1:3);tlink.destination_ID(1:3)},'ad-'))
                    temp = find(contains(link_log(:,2),tlink.origin_ID),1,'first');
                    tlink.origin_cdata_num = link_log{temp,1};
                    temp = find(contains(link_log(:,2),tlink.destination_ID),1,'first');
                    tlink.destination_cdata_num = link_log{temp,1};
                    synapse_ind = strcmp({obj.model.synapse_types.name},tlink.synaptictype);
                    cdata_holder = obj.build_link_cdata(tlink,obj.model.synapse_types(synapse_ind));
                    out_text = [out_text;cdata_holder];
                    obj.model.link_objects(i) = tlink;
                end
            end
            
            if numLinks > 0
                links2fill = find(cellfun(@isempty,{obj.model.link_objects.origin_cdata_num}));
                CDATA_item_num = numNeurons+numMuscles+(numLinks - length(links2fill));
            end
            
            for i = 1:numAdapters
                % Create objects for adapter and its incoming and outgoing links
                    adapter = obj.model.adapter_objects(i);
                    inlink = obj.model.link_objects(links2fill(contains({obj.model.link_objects(links2fill).destination_ID},adapter.ID)));
                    outlink = obj.model.link_objects(links2fill(contains({obj.model.link_objects(links2fill).origin_ID},adapter.ID)));
                % Generate CDATA text for the adapter
                cdata_holder = obj.build_node_cdata(obj.model.adapter_objects(i));
                out_text = [out_text;cdata_holder];
                link_log{i+numNeurons+numMuscles,1} = CDATA_item_num;
                link_log{i+numNeurons+numMuscles,2} = obj.model.adapter_objects(i).ID;
                % Determine the origin and destination CDATA numbers for the links
                    inlink.origin_cdata_num = link_log{find(contains(link_log(:,2),inlink.origin_ID),1,'first'),1};
                    outlink.destination_cdata_num = link_log{find(contains(link_log(:,2),outlink.destination_ID),1,'first'),1};
                    inlink.destination_cdata_num = CDATA_item_num;
                    outlink.origin_cdata_num = CDATA_item_num;
                % Generate the inlink CDATA
                cdata_holder = obj.build_link_cdata(inlink,obj.model.synapse_types(1));
                out_text = [out_text;cdata_holder];
                % Generate the outlink CDATA
                cdata_holder = obj.build_link_cdata(outlink,obj.model.synapse_types(1));
                out_text = [out_text;cdata_holder];
                % Change the model items to match the in/outlink data that was changed in the loop
                    obj.model.link_objects(links2fill(contains({obj.model.link_objects(links2fill).destination_ID},adapter.ID))) = inlink;
                    obj.model.link_objects(links2fill(contains({obj.model.link_objects(links2fill).origin_ID},adapter.ID))) = outlink;
                CDATA_item_num = CDATA_item_num + 3;
            end
            
%             for jj = 1:length(links2fill)
%                 linkInd = links2fill(jj);
%                 temp = find(contains(link_log(:,2),obj.model.link_objects(linkInd).origin_ID),1,'first');
%                 obj.model.link_objects(linkInd).origin_cdata_num = link_log{temp,1};
%                 temp = find(contains(link_log(:,2),obj.model.link_objects(linkInd).destination_ID),1,'first');
%                 obj.model.link_objects(linkInd).destination_cdata_num = link_log{temp,1};
%                 synapse_ind = 1;
%                 cdata_holder = obj.build_link_cdata(obj.model.link_objects(linkInd),obj.model.synapse_types(synapse_ind));
%                 out_text = [out_text;cdata_holder];
%             end

            cdata_postscript = {'</AddFlow>';...
                                '</Diagram>';...
                                '</Root>';...
                                ']]></DiagramXml>'};
            
            out_text = [out_text;cdata_postscript];
        end
        %% Build AFORM
        function out_text = build_aform_text(~,datatool,fileType)
            try datatool.axes_objects(1).name;            
                numDTaxes = size(datatool.axes_objects,1);
            catch
                numDTaxes = 0;
            end
            
            if numDTaxes > 0
                switch fileType
                    case 'project'
                        axes_insert = {'<AxisList>'};
                        axis_ender = '</AxisList>';
                    case 'simulation'
                        axes_insert = {'<DataColumns>'};
                        axis_ender = '</DataColumns>';
                end
                for ii = 1:numDTaxes
                    dtaxes = datatool.axes_objects(ii);
                    switch dtaxes.target_type
                        case 'neuron'
                            dataClass = 'IntegrateFireGUI.DataObjects.Behavior.Neurons.NonSpiking';
                            dataAssembly = 'IntegrateFireGUI.dll';
                            tname = dtaxes.target_name;
                        case 'muscle'
                            dataClass = 'AnimatGUI.DataObjects.Physical.Bodies.LinearHillMuscle';
                            dataAssembly = 'AnimatGUI.dll';
                            tname = dtaxes.target_name(4:end-7);
                    end
                    datanum = ii-1;
                    switch fileType
                        case 'project'
                            ax_holder = {'<Axis>';...
                                '<AssemblyFile>LicensedAnimatGUI.dll</AssemblyFile>';...
                                '<ClassName>LicensedAnimatGUI.DataObjects.Charting.Pro2DAxis</ClassName>';...
                                ['<Name>',tname,'</Name>'];...
                                ['<WorkingAxis>',num2str(datanum),'</WorkingAxis>'];...
                                '<DataColumns>';...
                                '<DataColumn>';...
                                '<AssemblyFile>LicensedAnimatGUI.dll</AssemblyFile>';...
                                '<ClassName>LicensedAnimatGUI.DataObjects.Charting.Pro2DColumn</ClassName>';...
                                ['<Name>',tname,'</Name>'];...
                                ['<ID>',[datatool.name,'-',dtaxes.tdata_ID,num2str(ii)],'</ID>'];...
                                ['<DataItemAssemblyFile>',dataAssembly,'</DataItemAssemblyFile>'];...
                                ['<DataItemClassName>',dataClass,'</DataItemClassName>'];...
                                '<StructureID>e40d2c4f-9c31-49f8-8a5c-5688fb768225</StructureID>';...
                                ['<DataItemID>',dtaxes.target_ID,'</DataItemID>'];...
                                ['<SelectedDataType>',dtaxes.datatype,'</SelectedDataType>'];...
                                ['<DataSubSet>',num2str(datanum),'</DataSubSet>'];...
                                ['<PrevDataSubset>',num2str(datanum),'</PrevDataSubset>'];...
                                '<UseIncomingDataType>False</UseIncomingDataType>';...
                                '<LineType>MediumSolid</LineType>';...
                                '<PointType>Plus</PointType>';...
                                '<PlotMethodType>Line</PlotMethodType>';...
                                ['<LineColor>',num2str(dtaxes.linecolor),'</LineColor>'];...
                                '</DataColumn>';...
                                '</DataColumns>';...
                                '</Axis>'};
                        case 'simulation'
                            ax_holder = {'<DataColumn>';...
                                '<ModuleName/>';...
                                '<Type>DataColumn</Type>';...
                                ['<ID>',[datatool.name,'-',dtaxes.tdata_ID,num2str(ii)],'</ID>'];...
                                ['<ColumnName>',tname,'</ColumnName>'];...
                                ['<DataType>',dtaxes.datatype,'</DataType>'];...
                                ['<TargetID>',dtaxes.target_ID,'</TargetID>'];...
                                '</DataColumn>'};
                    end
                    axes_insert = [axes_insert;ax_holder];
                end
                axes_insert{end+1,1} = axis_ender;
            else
                switch fileType
                    case 'project'
                        axes_insert = {'AxisList/>'};
                    case 'simulation'
                        axes_insert = {'<DataColumns/>'};
                end
            end
            
            switch fileType
                case 'project'
                    out_text = [{'<Form>';...
                        '<Form>';...
                        ['<ID>',datatool.tfID,'</ID>'];...
                        ['<Title>',datatool.name,'</Title>'];...
                        ['<TabPageName>',datatool.name,'</TabPageName>'];...
                        '<AssemblyFile>LicensedAnimatGUI.dll</AssemblyFile>';...
                        '<ClassName>LicensedAnimatGUI.Forms.Charts.LineChart</ClassName>';...
                        '<AutoCollectInterval>True</AutoCollectInterval>';...
                        ['<CollectDataInterval Value="',num2str(datatool.collectdatainterval),'" Scale="milli" Actual="',num2str(datatool.collectdatainterval/1000),'"/>'];...
                        '<CollectTimeWindow Value="11" Scale="None" Actual="11"/>';...
                        '<UpdateDataInterval Value="200" Scale="milli" Actual="0.2"/>';...
                        '<SetStartEndTime>True</SetStartEndTime>';...
                        ['<CollectStartTime Value="',num2str(datatool.starttime),'" Scale="None" Actual="',num2str(datatool.starttime),'"/>'];...
                        ['<CollectEndTime Value="',num2str(datatool.endtime),'" Scale="None" Actual="',num2str(datatool.endtime),'"/>']};...
                        axes_insert;...
                        {'<SaveDataWhenClosed>False</SaveDataWhenClosed>';...
                        '<UpdateChartAtEnd>True</UpdateChartAtEnd>';...
                        '<PointsToKeep>55000</PointsToKeep>';...
                        '<YAxisOffset>0</YAxisOffset>';...
                        '<GraphConfig ByteCount="8947"/>';...
                        '</Form>';...
                        '</Form>'}];
                case 'simulation'
                    out_text = [{'<DataChart>';...
                        ['<ID>',datatool.tfID,'</ID>'];...
                        '<Type>FileChart</Type>';...
                        ['<OutputFilename>',[datatool.name,'.txt'],'</OutputFilename>'];...
                        ['<Name>',datatool.name,'</Name>'];...
                        '<SetStartEndTime>True</SetStartEndTime>';...
                        '<CollectTimeWindow>-1</CollectTimeWindow>';...
                        '<AlwaysActive>False</AlwaysActive>';...
                        ['<StartTime>',num2str(datatool.starttime),'</StartTime>'];...
                        ['<EndTime>',num2str(datatool.endtime),'</EndTime>'];...
                        ['<CollectInterval>',num2str(datatool.collectdatainterval/1000),'</CollectInterval>']};...
                        axes_insert;...
                        {'</DataChart>'}];
            end
            
        end
        %% Build Link CDATA
        function out_text = build_link_cdata(~,link,synapse)
            tlink = link;
            tsyn = synapse;
            out_text = {['  <Link Org="',num2str(tlink.origin_cdata_num),'" Dst="',num2str(tlink.destination_cdata_num),'">'];...
                '    <OrientedText>True</OrientedText>';...
                '    <Line Style="Polyline" OrthogonalDynamic="True" RoundedCorner="True" />';...
                ['    <ArrowDst Head="',tsyn.arrow_dest_style,'" Size="',tsyn.arrow_dest_size,'" Angle="',tsyn.arrow_dest_angle,'" Filled="',tsyn.arrow_dest_filled,'" />'];...
                ['    <ArrowOrg Head="',tsyn.arrow_origin_style,'" Size="',tsyn.arrow_origin_size,'" Angle="',tsyn.arrow_origin_angle,'" Filled="',tsyn.arrow_origin_filled,'" />'];...
                ['    <ArrowMid Head="',tsyn.arrow_mid_style,'" Size="',tsyn.arrow_mid_size,'" Angle="',tsyn.arrow_mid_angle,'" Filled="',tsyn.arrow_mid_filled,'" />'];...
                '    <Jump>Arc</Jump>';...
                '    <DrawColor>-16777216</DrawColor>';...
                '    <TextColor>-16777216</TextColor>';...
                '    <Font Name="Arial" Size="8" Bold="False" Italic="False" Strikeout="False" Underline="False" />';...
                ['    <Tag>',tlink.ID,'</Tag>'];...
                '  </Link>'};
        end
        %% Build Node CDATA
        function out_text = build_node_cdata(~,node)
            if node.type == 'n'
                mod_loc = node.location-CanvasConstants.NEURON_size/2-1;
                out_text = 	{['  <Node Left="',num2str(mod_loc(1)),'" Top="',num2str(mod_loc(2)),'" Width="',num2str(node.nsize(1)/2),'" Height="',num2str(node.nsize(2)/2),'">'];...
                    '    <Shadow Style="None" Color="-16777216" Width="0" Height="0" />';...
                    '    <Shape Style="Termination" Orientation="so_0" />';...
                    '    <FillColor>-7876870</FillColor>';...
                    '    <DrawColor>-16777216</DrawColor>';...
                    '    <TextColor>-16777216</TextColor>';...
                    '    <GradientColor>0</GradientColor>';...
                    ['    <Text>',node.name,'</Text>'];...
                    '    <Font Name="Arial" Size="8" Bold="True" Italic="False" Strikeout="False" Underline="False" />';...
                    ['    <Tag>',node.ID,'</Tag>'];...
                    '  </Node>'};
            elseif strcmp(node.type,'muscle')
                out_text = {['  <Node Left="',num2str(node.location(1)),'" Top="',num2str(node.location(2)),'" Width="',num2str(node.size(1)),'" Height="',num2str(node.size(2)),'">'];...
                    '    <Shadow Style="None" Color="-16777216" Width="0" Height="0" />';...
                    '    <Shape Style="Rectangle" Orientation="so_0" />';...
                    '    <AutoSize>ImageToNode</AutoSize>';...
                    '    <Alignment>CenterBOTTOM</Alignment>';...
                    '    <FillColor>-1</FillColor>';...
                    '    <DrawColor>16777215</DrawColor>';...
                    '    <TextColor>-16777216</TextColor>';...
                    '    <GradientColor>0</GradientColor>';...
                    ['    <Text>',node.name,'</Text>'];...
                    '    <Font Name="Arial" Size="14" Bold="True" Italic="False" Strikeout="False" Underline="False" />';...
                    '    <ImageIndex>0</ImageIndex>';...
                    ['    <Tag>',node.ID,'</Tag>'];...
                    '  </Node>'};
            elseif strcmp(node.type,'adapter')
                out_text = 	{['  <Node Left="',num2str(node.location(1)),'" Top="',num2str(node.location(2)),'" Width="',num2str(node.size(1)),'" Height="',num2str(node.size(2)),'">'];...
                    '    <Shadow Style="None" Color="-16777216" Width="0" Height="0" />';...
                    '    <Shape Style="Display" Orientation="so_0" />';...
                    '    <FillColor>-360334</FillColor>';...
                    '    <DrawColor>-16777216</DrawColor>';...
                    '    <TextColor>-16777216</TextColor>';...
                    '    <GradientColor>0</GradientColor>';...
                    ['    <Text>',node.name,'</Text>'];...
                    '    <Font Name="Arial" Size="8" Bold="True" Italic="False" Strikeout="False" Underline="False" />';...
                    ['    <Tag>',node.ID,'</Tag>'];...
                    '  </Node>'};
            else
                disp('other cdata nodes not loaded')
                disp(' ')
            end
        end
        %% Build Tab Text
        function out_text = build_tab_text(obj,ns_name)
            try obj.model.datatool_objects(1).name;
                numDatatools = size(obj.model.datatool_objects,1);
            catch
                numDatatools = 0;
            end
            
            ns_cdata_ID = [ns_name,'-cdata'];
            ns_page_text = {['      &lt;Page Title="',ns_name,'" ImageList="True" ImageIndex="1" Selected="True" Control="null" UniqueName=""&gt;'];...
            '        &lt;CustomPageData&gt;&lt;![CDATA[&lt;TabPage&gt;';...
            '&lt;Form&gt;';...
            ['&lt;ID&gt;',ns_cdata_ID,'&lt;/ID&gt;'];...
            ['&lt;Title&gt;',ns_name,'&lt;/Title&gt;'];...
            ['&lt;TabPageName&gt;',ns_name,'&lt;/TabPageName&gt;'];...
            '&lt;AssemblyFile&gt;LicensedAnimatGUI.dll&lt;/AssemblyFile&gt;';...
            '&lt;ClassName&gt;LicensedAnimatGUI.Forms.Behavior.AddFlowDiagram&lt;/ClassName&gt;';...
            '&lt;OrganismID&gt;e40d2c4f-9c31-49f8-8a5c-5688fb768225&lt;/OrganismID&gt;';...
            ['&lt;SubSystemID&gt;',ns_name,'-ID','&lt;/SubSystemID&gt;'];...
            '&lt;/Form&gt;';...
            '&lt;/TabPage&gt;';...
            ']]&gt;&lt;/CustomPageData&gt;';...
            '      &lt;/Page&gt;'};
            
            out_text = ns_page_text;
        
            if numDatatools > 0
                for ii = 1:numDatatools
                    datatool = obj.model.datatool_objects(ii);
                    dt_page_text = {['&lt;Page Title="',datatool.name,'" ImageList="True" ImageIndex="',num2str(ii+1),'" Selected="False" Control="null" UniqueName=""&gt;'];...
                        '&lt;CustomPageData&gt;&lt;![CDATA[&lt;TabPage&gt;';...
                        '&lt;Form&gt;';...
                        ['&lt;ID&gt;',datatool.tfID,'&lt;/ID&gt;'];...
                        ['&lt;Title&gt;',datatool.name,'&lt;/Title&gt;'];...
                        ['&lt;TabPageName&gt;',datatool.name,'&lt;/TabPageName&gt;'];...
                        '&lt;AssemblyFile&gt;LicensedAnimatGUI.dll&lt;/AssemblyFile&gt;';...
                        '&lt;ClassName&gt;LicensedAnimatGUI.Forms.Charts.LineChart&lt;/ClassName&gt;';...
                        ['&lt;ExternalFile&gt;',datatool.name,'.aform&lt;/ExternalFile&gt;'];...
                        '&lt;/Form&gt;';...
                        '&lt;/TabPage&gt;';...
                        ']]&gt;&lt;/CustomPageData&gt;';...
                        '&lt;/Page&gt;'};
                    out_text = [out_text;dt_page_text];
                end
            end
        end
        %% Build Synapse Type
        function out_text = build_synapse_type(~,synapse,fileType)
            switch fileType
                case 'project'
                    out_text = {'<Link>'
                        '<AssemblyFile>IntegrateFireGUI.dll</AssemblyFile>';...
                        '<ClassName>IntegrateFireGUI.DataObjects.Behavior.SynapseTypes.NonSpikingChemical</ClassName>';...
                        ['<ID>',synapse.ID,'</ID>'];...
                        '<AdjustDst>False</AdjustDst>';...
                        '<AdjustOrg>False</AdjustOrg>';...
                        '<ArrowDestination>';...
                            ['<Style>',synapse.arrow_dest_style,'</Style>'];...
                            ['<Size>',synapse.arrow_dest_size,'</Size>'];...
                            ['<Angle>',synapse.arrow_dest_angle,'</Angle>'];...
                            ['<Filled>',synapse.arrow_dest_filled,'</Filled>'];...
                        '</ArrowDestination>';...
                        '<ArrowMiddle>';...
                            ['<Style>',synapse.arrow_mid_style,'</Style>'];...
                            ['<Size>',synapse.arrow_mid_size,'</Size>'];...
                            ['<Angle>',synapse.arrow_mid_angle,'</Angle>'];...
                            ['<Filled>',synapse.arrow_mid_filled,'</Filled>'];...
                        '</ArrowMiddle>';...
                        '<ArrowOrigin>';...
                            ['<Style>',synapse.arrow_origin_style,'</Style>'];...
                            ['<Size>',synapse.arrow_origin_size,'</Size>'];...
                            ['<Angle>',synapse.arrow_origin_angle,'</Angle>'];...
                            ['<Filled>',synapse.arrow_origin_filled,'</Filled>'];...
                        '</ArrowOrigin>';...
                        '<BackMode>Transparent</BackMode>';...
                        '<DashStyle>Solid</DashStyle>';...
                        '<DrawColor>-16777216</DrawColor>';...
                        '<DrawWidth>1</DrawWidth>';...
                        '<DestinationID/>';...
                        '<Font Family="Arial" Size="12" Bold="False" Underline="False" Strikeout="False" Italic="False"/>';...
                        '<Hidden>False</Hidden>';...
                        '<Jump>Arc</Jump>';...
                        '<LineStyle>Polyline</LineStyle>';...
                        '<OrthogonalDynamic>True</OrthogonalDynamic>';...
                        '<OriginID/>';...
                        '<OrientedText>True</OrientedText>';...
                        '<Selectable>True</Selectable>';...
                        '<Stretchable>True</Stretchable>';...
                        '<Text/>';...
                        '<ToolTip/>';...
                        '<Url/>';...
                        '<ZOrder>0</ZOrder>';...
                        ['<Name>',synapse.name,'</Name>'];...
                        ['<EquilibriumPotential Value="',num2str(synapse.equil_pot),'" Scale="milli" Actual="',num2str(synapse.equil_pot/1000),'"/>'];...
                        ['<MaxSynapticConductance Value="',num2str(synapse.max_syn_cond),'" Scale="micro" Actual="',num2str(synapse.max_syn_cond/1e6),'"/>'];...
                        ['<PreSynapticThreshold Value="',num2str(synapse.presyn_thresh),'" Scale="milli" Actual="',num2str(synapse.presyn_thresh/1000),'"/>'];...
                        ['<PreSynapticSaturationLevel Value="',num2str(synapse.presyn_sat),'" Scale="milli" Actual="',num2str(synapse.presyn_sat/1000),'"/>'];...
                        '</Link>'};
                case 'simulation'
                    out_text = {'<SynapseType>';...
                        ['<Name>',synapse.name,'</Name>'];...
                        ['<ID>',synapse.ID,'</ID>'];...
                        '<Type>NonSpikingChemical</Type>';...
                        ['<Equil>',num2str(synapse.equil_pot),'</Equil>'];...
                        ['<SynAmp>',num2str(synapse.max_syn_cond),'</SynAmp>'];...
                        ['<ThreshV>',num2str(synapse.presyn_thresh),'</ThreshV>'];...
                        ['<SaturateV>',num2str(synapse.presyn_sat),'</SaturateV>'];...
                        '</SynapseType>'};
            end
        end
    end   
end
